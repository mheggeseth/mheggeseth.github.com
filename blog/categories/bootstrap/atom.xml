<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bootstrap | Just Enough To Be Dangerous]]></title>
  <link href="http://mheggeseth.github.io/blog/categories/bootstrap/atom.xml" rel="self"/>
  <link href="http://mheggeseth.github.io/"/>
  <updated>2013-11-17T20:17:44-06:00</updated>
  <id>http://mheggeseth.github.io/</id>
  <author>
    <name><![CDATA[Michael Heggeseth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ThatConference Session List 2: Knockout My Bootstrap!]]></title>
    <link href="http://mheggeseth.github.io/blog/2013/11/17/conference-sessions-2/"/>
    <updated>2013-11-17T13:42:00-06:00</updated>
    <id>http://mheggeseth.github.io/blog/2013/11/17/conference-sessions-2</id>
    <content type="html"><![CDATA[<p>``` bash</p>

<h1>REMEMBER: follow along with these examples by cloning the</h1>

<h1>repository and checking out the tag for each step</h1>

<p>$ git clone <a href="https://github.com/mheggeseth/ThatSessions.git">https://github.com/mheggeseth/ThatSessions.git</a>
$ git checkout -f [tag-name-for-step]
```</p>

<p><a href="/blog/2013/10/13/conference-sessions-1/">Last time</a>, we used <a href="http://jquery.com/">jQuery</a>, JSONP, and <a href="http://www.odata.org/">OData</a> to load a list of conference sessions into some HTML <a href="http://getbootstrap.com/getting-started/">Bootstrap</a> boilerplate. We got loading to work, but our page isn&rsquo;t very pretty or useful yet so we&rsquo;re going to fix that (at least part way).</p>

<p><img src="/images/posts/load-session-list.jpg"></p>

<h2>Enter KnockoutJS</h2>

<pre><code>git checkout -f knockoutjs
</code></pre>

<p>Obviously, we&rsquo;ll add the <a href="http://knockoutjs.com">KnockoutJS</a> library.</p>

<p>``` html</p>

<script type="text/javascript" src="js/knockout-2.3.0.js"></script>


<p>```</p>

<p>Next, we&rsquo;ll make a few simple changes to our JavaScript.</p>

<p>``` javascript
var viewModel = {</p>

<pre><code>sessions: ko.observableArray()
</code></pre>

<p>};</p>

<p>$.ajax({</p>

<pre><code>url: "http://www.thatconference.com/odata/api.svc/Sessions?$format=json&amp;$callback=?",
dataType: "jsonp",
success: function (data) {
    viewModel.sessions(data.d);
}
</code></pre>

<p>});
```</p>

<p> First, we defined a <code>viewModel</code> object containing a single <a href="http://knockoutjs.com/documentation/observableArrays.html">observableArray</a> to be a container for our sessions. Then we set the <code>sessions</code> observable to the array of sessions returned by the AJAX request.</p>

<p>Notice that our JavaScript has now lost any notion of HTML or the DOM. This is a good thing. A nice benefit of using Knockout&rsquo;s MVVM pattern is separating your data (the view model) from how the data is presented in HTML markup (the view). This allows the HTML to accurately describe, to a great extent, the behavior of the page. This is a distinct advantage over jQuery, whose behavior is generally defined in JavaScript and you are left to guess what role markup elements play based on context clues in their IDs or CSS class names.</p>

<p>Let&rsquo;s update our HTML using Knockout&rsquo;s <code>data-bind</code> attribute to bind our session list to the page.</p>

<p>``` html</p>

<div class="container">
    <span data-bind="visible: !sessions().length">Loading sessions...</span>
    <ul class="list-unstyled" data-bind="foreach: sessions">
        <li data-bind="text: Title"></li>
    </ul>
</div>


<p>```</p>

<p>The <code>foreach: sessions</code> binding tells Knockout to repeat the element&rsquo;s inner HTML for each object in the <code>sessions</code> array. The binding context of the inner HTML of <code>&lt;ul data-bind="foreach: sessions"&gt;</code> then becomes the current element of <code>sessions</code>. So <code>&lt;li data-bind="text: Title"&gt;&lt;/li&gt;</code> will add a list item for each session whose value is the <code>Title</code> property of the session.</p>

<p>Notice that we added another element in there: <code>&lt;span data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/span&gt;</code>. Knockout&rsquo;s <code>visible</code> binding shows the current element if its value is truthy and hides it when its value is falsey. This allows us to easily provide a friendly loading message before sessions are loaded and then take it away once we&rsquo;ve loaded at least one session.</p>

<p>We forgot to do one thing, probably the most important thing. We need to tell Knockout to apply the bindings in the HTML to a view model. We add a call to <code>ko.applyBindings</code> to the end of our JavaScript after we&rsquo;ve defined our view model. Without this, the <code>data-bind</code> attributes we added to the markup are about as useless as a white crayon.</p>

<p><code>javascript
//find KO binding declarations and associate them with target viewModel members
ko.applyBindings(viewModel);
</code></p>

<p>So this is all fine and good, but you&rsquo;ve probably noticed that with the exception of the loading indicator, we haven&rsquo;t changed the look and feel of our page at all. However, the addition of Knockout to manage data and its application to the DOM should pay big dividends in the future. For one, because <code>sessions</code> is not just any array but an observable array, if we added or removed a session, Knockout would automatically update the view: a task that would have required significantly more code with our previous jQuery setup.</p>

<p>For reference, here&rsquo;s the diff for our latest set of changes to <code>index.html</code>.</p>

<p>``` diff</p>

<pre><code> &lt;div class="container"&gt;
</code></pre>

<ul>
<li><pre><code> &lt;ul id="sessionList" class="list-unstyled"&gt;&lt;/ul&gt;
</code></pre></li>
<li><pre><code> &lt;span data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/span&gt;
</code></pre></li>
<li><pre><code> &lt;ul class="list-unstyled" data-bind="foreach: sessions"&gt;
</code></pre></li>
<li><pre><code>     &lt;li data-bind="text: Title"&gt;&lt;/li&gt;
</code></pre></li>
<li><pre><code> &lt;/ul&gt;
</code></pre>

<p> </div></p>

<p> <script type="text/javascript" src="js/jquery-1.10.2.min.js"></script></p></li>
<li> <script type="text/javascript" src="js/knockout-2.3.0.js"></script>
 <script type="text/javascript" src="js/bootstrap.min.js"></script>
 <script type="text/javascript"></li>
<li><pre><code> var viewModel = {
</code></pre></li>
<li><pre><code>     sessions: ko.observableArray()
</code></pre></li>
<li><pre><code> };
</code></pre>

<p>+
     $.ajax({
         url: &ldquo;<a href="http://www.thatconference.com/odata/api.svc/Sessions?$format=json&amp;$callback=?">http://www.thatconference.com/odata/api.svc/Sessions?$format=json&amp;$callback=?</a>&rdquo;,
         dataType: &ldquo;jsonp&rdquo;,
         success: function (data) {</p></li>
<li><pre><code>         var sessions = data.d;
</code></pre></li>
<li><pre><code>         var $sessionList = $("#sessionList");
</code></pre></li>
<li><pre><code>         $.each(sessions, function(index, session) {
</code></pre></li>
<li><pre><code>             $("&lt;li&gt;&lt;/li&gt;").text(session.Title).appendTo($sessionList);
</code></pre></li>
<li><pre><code>         });
</code></pre></li>
<li><pre><code>         viewModel.sessions(data.d);
     }
 });
</code></pre>

<p>+</p></li>
<li><pre><code> //find KO binding declarations and associate them with target viewModel members
</code></pre></li>
<li><pre><code> ko.applyBindings(viewModel);
</code></pre>

<p> </script>
</body>
```</p></li>
</ul>


<h2>Bootstrap Window Dressing</h2>

<pre><code>git checkout -f bootstrap-style
</code></pre>

<p>So now that we have the beginnings of an application, let&rsquo;s use Bootstrap to make it look a little bit nicer. First, we&rsquo;ll give the navigation bar fixed layout so that it stays at the top of the screen as we scroll. This is as easy as adding the <code>navbar-fixed-top</code> style to the <code>navbar</code> tag. Bootstrap requires us to add 70px of padding to the top of the <code>body</code> tag to facilitate the fixed navbar behavior so we&rsquo;ll do that too.</p>

<p>```html
<head>
&hellip;</p>

<pre><code>&lt;style type="text/css"&gt;
    body { padding-top: 70px; }
&lt;/style&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>...
&lt;nav class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;...&lt;/nav&gt;
...
</code></pre>

<p></body>
```</p>

<p>Now, let&rsquo;s add some style to our list. First, we&rsquo;ll give our loading indicator a little flare by adding the <a href="http://getbootstrap.com/components/#alerts">alert</a> style (in a non-threatening way).</p>

<p>``` html</p>

<div class="alert alert-info" data-bind="visible: !sessions().length">Loading sessions...</div>


<p>```</p>

<p><img src="/images/posts/loading-indicator.png"></p>

<p>Then we&rsquo;ll turn our list into a <a href="http://getbootstrap.com/components/#list-group">list group</a> and use <a href="http://getbootstrap.com/components/#labels">labels</a> to highlight some useful information about the session like scheduled time (with a little help from <a href="http://momentjs.com">Moment.js</a>), location, category, and level.</p>

<p>``` html</p>

<ul class="list-group" data-bind="foreach: sessions">
    <li class="list-group-item">
        <span class="label label-primary" data-bind="text: new moment(ScheduledDateTime).format('ddd M/D/YY h:mm a') + ' | ' + ScheduledRoom"></span>
        <span class="label label-default" data-bind="text: Category + ' | ' + Level"></span>
        <h4 class="list-group-item-heading" style="margin-top:5px" data-bind="text: Title"></h4>
    </li>
</ul>


<p>```</p>

<p><img src="/images/posts/styled-list.png"></p>

<p>Here are all the changes we just made:</p>

<p>``` diff
@@ -4,13 +4,15 @@</p>

<pre><code> &lt;title&gt;That Conference / Sessions&lt;/title&gt;
 &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
 &lt;!-- Bootstrap --&gt;
</code></pre>

<ul>
<li> <!-- <link rel="stylesheet" href="http://mheggeseth.github.io//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css"> &mdash;>
 <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css"></li>
<li> <!-- <link rel="stylesheet" href="http://mheggeseth.github.io//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-theme.min.css"> &mdash;>
 <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.min.css"></li>
<li> <style type="text/css"></li>
<li><pre><code> /* Necessary for fixed header http://getbootstrap.com/components/#navbar-fixed-top */
</code></pre></li>
<li><pre><code> body { padding-top: 70px; }
</code></pre></li>
<li> </style>
</head>
<body></li>
<li> <nav class="navbar navbar-inverse" role="navigation"></li>
<li><p> <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
     <div class="navbar-header">
         <a class="navbar-brand visible-xs" href="#">That / Sessions</a>
         <a class="navbar-brand hidden-xs" href="#">That Conference / Sessions</a>
@@ -18,17 +20,20 @@
 </nav></p>

<p> <div class="container"></p></li>
<li><pre><code> &lt;span data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/span&gt;
</code></pre></li>
<li><pre><code> &lt;ul class="list-unstyled" data-bind="foreach: sessions"&gt;
</code></pre></li>
<li><pre><code>     &lt;li data-bind="text: Title"&gt;&lt;/li&gt;
</code></pre></li>
<li><pre><code> &lt;div class="alert alert-info" data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/div&gt;
</code></pre></li>
<li><pre><code> &lt;ul class="list-group" data-bind="foreach: sessions"&gt;
</code></pre></li>
<li><pre><code>     &lt;li class="list-group-item"&gt;
</code></pre></li>
<li><pre><code>         &lt;span class="label label-primary" data-bind="text: new moment(ScheduledDateTime).format('ddd M/D/YY h:mm a') + ' | ' + ScheduledRoom"&gt;&lt;/span&gt;
</code></pre></li>
<li><pre><code>         &lt;span class="label label-default" data-bind="text: Category + ' | ' + Level"&gt;&lt;/span&gt;
</code></pre></li>
<li><pre><code>         &lt;h4 class="list-group-item-heading" style="margin-top:5px" data-bind="text: Title"&gt;&lt;/h4&gt;
</code></pre></li>
<li><pre><code>     &lt;/li&gt;
 &lt;/ul&gt;
</code></pre>

<p> </div></p></li>
<li><p> <!--<script src="http://mheggeseth.github.io//code.jquery.com/jquery.js"></script>&mdash;>
 <script type="text/javascript" src="js/jquery-1.10.2.min.js"></script>
 <script type="text/javascript" src="js/knockout-2.3.0.js"></script></p></li>
<li> <!--<script src="http://mheggeseth.github.io//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>&mdash;>
 <script type="text/javascript" src="js/bootstrap.min.js"></script></li>
<li> <script type="text/javascript" src="js/moment.min.js"></script>
 <script type="text/javascript">
     var viewModel = {
         sessions: ko.observableArray()
```</li>
</ul>


<h2>Next Time: Making it Useful</h2>

<p>So now that we have a session list that&rsquo;s marginally pretty and functional, we should probably make it useful too. Next time, we&rsquo;ll organize the sessions in a relevant way and make it easy to track favorites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple, Responsive Conference Session List: Part 1]]></title>
    <link href="http://mheggeseth.github.io/blog/2013/10/13/conference-sessions-1/"/>
    <updated>2013-10-13T22:55:00-05:00</updated>
    <id>http://mheggeseth.github.io/blog/2013/10/13/conference-sessions-1</id>
    <content type="html"><![CDATA[<p>August 2012 was the inaugural <a href="http://thatconference.com">That Conference</a>. It was an awesome conference (one that I will attend as long as it keeps going), but having just my iPhone with me, it was a challenge to peruse upcoming sessions using the conference&rsquo;s less-than-mobile-friendly website. So before I geared up to attend That Conference 2013, I built a mobile-friendly page for browsing sessions.</p>

<h3>What I wanted</h3>

<ul>
<li>View sessions as simply as possible. Minimize cruft.</li>
<li>Hide or diminish irrelevant information. Specifically, hide sessions that have already happened.</li>
<li>Track favorite sessions without accounts.</li>
<li>Tolerate inconsistent connectivity and bandwidth (it&rsquo;s a conference, after all).</li>
<li>Provide a usable, consistent experience at any screen width.</li>
</ul>


<p><strong>To be clear,</strong> the That Conference organizers did a great job creating a mobile app for 2013 (which I didn&rsquo;t know about when I wrote my page). I tried it and liked it, but there were a couple features my page had that were important to me so I ended up using my page for most of the conference. I&rsquo;m looking forward to seeing how the mobile app improves for 2014. It will probably have useful features that I haven&rsquo;t even thought of.</p>

<h3>Part 1 of N&hellip;</h3>

<p>To keep this post from becoming <em>The Odyssey</em>, I&rsquo;m breaking down the construction and evolution of the page into a series of posts. I&rsquo;m not sure how many there will be yet. My intention is to go step-by-step through my &ldquo;process&rdquo; of building the page, paying special attention to the tools and techniques I used along the way as well as well as pointing out difficulties and areas for improvement. Let&rsquo;s get started!</p>

<p><em>Want to follow along? <a href="http://git-scm.com/downloads">Install Git</a>, clone the repo below, then checkout the specified tag to get the full code state for that step.</em></p>

<pre><code>git clone https://github.com/mheggeseth/ThatSessions.git
</code></pre>

<h2>Bootstrap boilerplate</h2>

<pre><code>git checkout -f bootstrap-boilerplate
</code></pre>

<p>We&rsquo;ll start with the HTML boilerplate provided by <a href="http://getbootstrap.com/getting-started/">Bootstrap</a>. If you aren&rsquo;t famliar with Bootstrap, you&rsquo;re at least familiar with its style (<a href="http://twitter.com">Twitter</a>, <a href="http://angularjs.org">Angular</a>, and the web sites for many other open source frameworks). As a nice-looking, easy-to-use, responsive-by-default front-end library, it&rsquo;s an easy win for small projects.</p>

<p>``` html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;That Conference / Sessions&lt;/title&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
&lt;!-- Bootstrap --&gt;
&lt;link href="css/bootstrap.min.css" rel="stylesheet" media="screen"&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;nav class="navbar navbar-inverse" role="navigation"&gt;
    &lt;div class="navbar-header"&gt;
        &lt;a class="navbar-brand visible-xs" href="#"&gt;That / Sessions&lt;/a&gt;
        &lt;a class="navbar-brand hidden-xs" href="#"&gt;That Conference / Sessions&lt;/a&gt;
    &lt;/div&gt;
&lt;/nav&gt;

&lt;div class="container"&gt;
    &lt;div class="jumbotron"&gt;
        &lt;div class="container"&gt;
            &lt;h1&gt;Hello, world!&lt;/h1&gt;
            &lt;p&gt;Do you think we should write some code to load the sessions? Yes.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;
&lt;script src="http://mheggeseth.github.io//code.jquery.com/jquery.js"&gt;&lt;/script&gt;
&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;
&lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p><img src="/images/posts/bootstrap-boilerplate-screenshot.png"></p>

<p>I&rsquo;ve already made one nice customization to the boilerplate, taking advantage of the <a href="http://getbootstrap.com/css/#responsive-utilities">responsive utility classes</a> that come with Bootstrap. When the browser width is narrow (i.e. mobile devices) shorten the header title to save space. The <code>visible-xs</code> class ensures an element will only be visible when the browser width is &ldquo;extra small&rdquo;. <code>hidden-xs</code> ensures an element is always hidden when the browser width is narrow.</p>

<p><code>html
...
&lt;a class="navbar-brand visible-xs" href="#"&gt;That / Sessions&lt;/a&gt;
&lt;a class="navbar-brand hidden-xs" href="#"&gt;That Conference / Sessions&lt;/a&gt;
...
</code></p>

<p><img src="/images/posts/bootstrap-boilerplate-screenshot-xs.png"></p>

<p>This will come in handy later in case we want to add other controls to the page header and keep them tidy on mobile devices.</p>

<h3>Tangent: Ad-Hoc HTTP Server with Node and <code>http-server</code></h3>

<p>If you have a favorite way of spinning up ad-hoc local HTTP servers, vaya con dios. For me, I turn to the <a href="https://github.com/nodeapps/http-server">http-server</a> package for <a href="http://nodejs.org">Node</a>. Install it globally and you can fire up an HTTP server from any location with <code>http-server</code>. It even gives you a unique port if you spin up multiple servers. Not too bad.</p>

<h2>Get me some sessions (with help from OData, jQuery, &amp; JSONP)</h2>

<pre><code>git checkout -f load-sessions
</code></pre>

<p>So we have a fairly nice-looking page that does exactly nothing. Let&rsquo;s get some sessions.</p>

<p>First I have to figure out how to do that. I&rsquo;m somewhat familiar with <a href="http://www.odata.org/">OData</a> so that&rsquo;s what I&rsquo;ll sniff out first. If you aren&rsquo;t familiar, OData is short-hand for the Open Data Protocol: an effort to document and encourage a standard for data APIs on the web.</p>

<p>And I think I might be in luck. Taking a look at the kind of AJAX-y stuff the That Conference home page is accessing using the Chrome Developer Tools, it looks like the site exposes an OData API.</p>

<p><img src="/images/posts/odata-discovery.jpg"></p>

<p>Let&rsquo;s see what we get at <code>thatconference.com/odata/api.svc/?$format=json</code>.</p>

<p><img src="/images/posts/odata-discovery-1.jpg"></p>

<p>Mmmm, <code>Sessions</code>. That sounds good. I&rsquo;ll have that. Let&rsquo;s see what&rsquo;s behind <code>thatconference.com/odata/api.svc/Sessions?$format=json</code>.</p>

<p><img src="/images/posts/odata-discovery-sessions.jpg"></p>

<p>Data. Just as I thought. Let&rsquo;s get this sweet, sweet data in our page using our old friend jQuery.</p>

<p>We replace our &ldquo;hello world&rdquo; hero box with</p>

<p>``` html</p>

<ul id="sessionList" class="list-unstyled"></ul>


<p>```</p>

<p>and get the sessions using a jQuery <code>$.ajax</code> call with JSONP:</p>

<p>``` html</p>

<script type="text/javascript">
    $.ajax({
        url: "http://www.thatconference.com/odata/api.svc/Sessions?$format=json&$callback=?",
        dataType: "jsonp",
        success: function (data) {
            var sessions = data.d;
            var $sessionList = $("#sessionList");
            $.each(sessions, function(index, session) {
                $("<li></li>").text(session.Title).appendTo($sessionList);
            });
        }
    });
</script>


<p>```</p>

<h3>Tangent: JSONP</h3>

<p>For security reasons, browsers don&rsquo;t allow AJAX requests to different domains than the current page. This is a good thing, but what if you want to do something legit like show recent tweets or load some conference sessions. JSONP is a clever trick for doing that. While you can&rsquo;t do AJAX requests to any old domain, you can load JavaScript from any old domain.</p>

<p>JSONP says, &ldquo;If I add a <code>&lt;script&gt;</code> tag to this page with the URL of a remote API I want to call and I also provide it the name of a callback function, you (the remote API) promise to return valid JavaScript invoking that function with the data I&rsquo;ve requested.&rdquo;</p>

<h3>JSONP/OData Caveat</h3>

<p>JSONP is not part of the OData spec, however JSONP support can easily be added to a WCF Data Service which natively supports OData. It just so happens that <code>thatconference.com/odata/api.svc</code> is one of these.</p>

<h2>Result</h2>

<p><img src="/images/posts/load-session-list.jpg"></p>

<p>It&rsquo;s a pretty bland and useless list of sessions. But we&rsquo;ll change that.</p>

<p>In the next post, we&rsquo;ll add a proper view model with <a href="http://knockoutjs.com">KnockoutJS</a> and see what we can do with Bootstrap to improve our style.</p>
]]></content>
  </entry>
  
</feed>
