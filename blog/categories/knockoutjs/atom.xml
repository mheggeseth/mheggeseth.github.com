<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: knockoutjs | Just Enough To Be Dangerous]]></title>
  <link href="http://mheggeseth.github.io/blog/categories/knockoutjs/atom.xml" rel="self"/>
  <link href="http://mheggeseth.github.io/"/>
  <updated>2013-11-17T20:17:44-06:00</updated>
  <id>http://mheggeseth.github.io/</id>
  <author>
    <name><![CDATA[Michael Heggeseth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ThatConference Session List 2: Knockout My Bootstrap!]]></title>
    <link href="http://mheggeseth.github.io/blog/2013/11/17/conference-sessions-2/"/>
    <updated>2013-11-17T13:42:00-06:00</updated>
    <id>http://mheggeseth.github.io/blog/2013/11/17/conference-sessions-2</id>
    <content type="html"><![CDATA[<p>``` bash</p>

<h1>REMEMBER: follow along with these examples by cloning the</h1>

<h1>repository and checking out the tag for each step</h1>

<p>$ git clone <a href="https://github.com/mheggeseth/ThatSessions.git">https://github.com/mheggeseth/ThatSessions.git</a>
$ git checkout -f [tag-name-for-step]
```</p>

<p><a href="/blog/2013/10/13/conference-sessions-1/">Last time</a>, we used <a href="http://jquery.com/">jQuery</a>, JSONP, and <a href="http://www.odata.org/">OData</a> to load a list of conference sessions into some HTML <a href="http://getbootstrap.com/getting-started/">Bootstrap</a> boilerplate. We got loading to work, but our page isn&rsquo;t very pretty or useful yet so we&rsquo;re going to fix that (at least part way).</p>

<p><img src="/images/posts/load-session-list.jpg"></p>

<h2>Enter KnockoutJS</h2>

<pre><code>git checkout -f knockoutjs
</code></pre>

<p>Obviously, we&rsquo;ll add the <a href="http://knockoutjs.com">KnockoutJS</a> library.</p>

<p>``` html</p>

<script type="text/javascript" src="js/knockout-2.3.0.js"></script>


<p>```</p>

<p>Next, we&rsquo;ll make a few simple changes to our JavaScript.</p>

<p>``` javascript
var viewModel = {</p>

<pre><code>sessions: ko.observableArray()
</code></pre>

<p>};</p>

<p>$.ajax({</p>

<pre><code>url: "http://www.thatconference.com/odata/api.svc/Sessions?$format=json&amp;$callback=?",
dataType: "jsonp",
success: function (data) {
    viewModel.sessions(data.d);
}
</code></pre>

<p>});
```</p>

<p> First, we defined a <code>viewModel</code> object containing a single <a href="http://knockoutjs.com/documentation/observableArrays.html">observableArray</a> to be a container for our sessions. Then we set the <code>sessions</code> observable to the array of sessions returned by the AJAX request.</p>

<p>Notice that our JavaScript has now lost any notion of HTML or the DOM. This is a good thing. A nice benefit of using Knockout&rsquo;s MVVM pattern is separating your data (the view model) from how the data is presented in HTML markup (the view). This allows the HTML to accurately describe, to a great extent, the behavior of the page. This is a distinct advantage over jQuery, whose behavior is generally defined in JavaScript and you are left to guess what role markup elements play based on context clues in their IDs or CSS class names.</p>

<p>Let&rsquo;s update our HTML using Knockout&rsquo;s <code>data-bind</code> attribute to bind our session list to the page.</p>

<p>``` html</p>

<div class="container">
    <span data-bind="visible: !sessions().length">Loading sessions...</span>
    <ul class="list-unstyled" data-bind="foreach: sessions">
        <li data-bind="text: Title"></li>
    </ul>
</div>


<p>```</p>

<p>The <code>foreach: sessions</code> binding tells Knockout to repeat the element&rsquo;s inner HTML for each object in the <code>sessions</code> array. The binding context of the inner HTML of <code>&lt;ul data-bind="foreach: sessions"&gt;</code> then becomes the current element of <code>sessions</code>. So <code>&lt;li data-bind="text: Title"&gt;&lt;/li&gt;</code> will add a list item for each session whose value is the <code>Title</code> property of the session.</p>

<p>Notice that we added another element in there: <code>&lt;span data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/span&gt;</code>. Knockout&rsquo;s <code>visible</code> binding shows the current element if its value is truthy and hides it when its value is falsey. This allows us to easily provide a friendly loading message before sessions are loaded and then take it away once we&rsquo;ve loaded at least one session.</p>

<p>We forgot to do one thing, probably the most important thing. We need to tell Knockout to apply the bindings in the HTML to a view model. We add a call to <code>ko.applyBindings</code> to the end of our JavaScript after we&rsquo;ve defined our view model. Without this, the <code>data-bind</code> attributes we added to the markup are about as useless as a white crayon.</p>

<p><code>javascript
//find KO binding declarations and associate them with target viewModel members
ko.applyBindings(viewModel);
</code></p>

<p>So this is all fine and good, but you&rsquo;ve probably noticed that with the exception of the loading indicator, we haven&rsquo;t changed the look and feel of our page at all. However, the addition of Knockout to manage data and its application to the DOM should pay big dividends in the future. For one, because <code>sessions</code> is not just any array but an observable array, if we added or removed a session, Knockout would automatically update the view: a task that would have required significantly more code with our previous jQuery setup.</p>

<p>For reference, here&rsquo;s the diff for our latest set of changes to <code>index.html</code>.</p>

<p>``` diff</p>

<pre><code> &lt;div class="container"&gt;
</code></pre>

<ul>
<li><pre><code> &lt;ul id="sessionList" class="list-unstyled"&gt;&lt;/ul&gt;
</code></pre></li>
<li><pre><code> &lt;span data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/span&gt;
</code></pre></li>
<li><pre><code> &lt;ul class="list-unstyled" data-bind="foreach: sessions"&gt;
</code></pre></li>
<li><pre><code>     &lt;li data-bind="text: Title"&gt;&lt;/li&gt;
</code></pre></li>
<li><pre><code> &lt;/ul&gt;
</code></pre>

<p> </div></p>

<p> <script type="text/javascript" src="js/jquery-1.10.2.min.js"></script></p></li>
<li> <script type="text/javascript" src="js/knockout-2.3.0.js"></script>
 <script type="text/javascript" src="js/bootstrap.min.js"></script>
 <script type="text/javascript"></li>
<li><pre><code> var viewModel = {
</code></pre></li>
<li><pre><code>     sessions: ko.observableArray()
</code></pre></li>
<li><pre><code> };
</code></pre>

<p>+
     $.ajax({
         url: &ldquo;<a href="http://www.thatconference.com/odata/api.svc/Sessions?$format=json&amp;$callback=?">http://www.thatconference.com/odata/api.svc/Sessions?$format=json&amp;$callback=?</a>&rdquo;,
         dataType: &ldquo;jsonp&rdquo;,
         success: function (data) {</p></li>
<li><pre><code>         var sessions = data.d;
</code></pre></li>
<li><pre><code>         var $sessionList = $("#sessionList");
</code></pre></li>
<li><pre><code>         $.each(sessions, function(index, session) {
</code></pre></li>
<li><pre><code>             $("&lt;li&gt;&lt;/li&gt;").text(session.Title).appendTo($sessionList);
</code></pre></li>
<li><pre><code>         });
</code></pre></li>
<li><pre><code>         viewModel.sessions(data.d);
     }
 });
</code></pre>

<p>+</p></li>
<li><pre><code> //find KO binding declarations and associate them with target viewModel members
</code></pre></li>
<li><pre><code> ko.applyBindings(viewModel);
</code></pre>

<p> </script>
</body>
```</p></li>
</ul>


<h2>Bootstrap Window Dressing</h2>

<pre><code>git checkout -f bootstrap-style
</code></pre>

<p>So now that we have the beginnings of an application, let&rsquo;s use Bootstrap to make it look a little bit nicer. First, we&rsquo;ll give the navigation bar fixed layout so that it stays at the top of the screen as we scroll. This is as easy as adding the <code>navbar-fixed-top</code> style to the <code>navbar</code> tag. Bootstrap requires us to add 70px of padding to the top of the <code>body</code> tag to facilitate the fixed navbar behavior so we&rsquo;ll do that too.</p>

<p>```html
<head>
&hellip;</p>

<pre><code>&lt;style type="text/css"&gt;
    body { padding-top: 70px; }
&lt;/style&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>...
&lt;nav class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;...&lt;/nav&gt;
...
</code></pre>

<p></body>
```</p>

<p>Now, let&rsquo;s add some style to our list. First, we&rsquo;ll give our loading indicator a little flare by adding the <a href="http://getbootstrap.com/components/#alerts">alert</a> style (in a non-threatening way).</p>

<p>``` html</p>

<div class="alert alert-info" data-bind="visible: !sessions().length">Loading sessions...</div>


<p>```</p>

<p><img src="/images/posts/loading-indicator.png"></p>

<p>Then we&rsquo;ll turn our list into a <a href="http://getbootstrap.com/components/#list-group">list group</a> and use <a href="http://getbootstrap.com/components/#labels">labels</a> to highlight some useful information about the session like scheduled time (with a little help from <a href="http://momentjs.com">Moment.js</a>), location, category, and level.</p>

<p>``` html</p>

<ul class="list-group" data-bind="foreach: sessions">
    <li class="list-group-item">
        <span class="label label-primary" data-bind="text: new moment(ScheduledDateTime).format('ddd M/D/YY h:mm a') + ' | ' + ScheduledRoom"></span>
        <span class="label label-default" data-bind="text: Category + ' | ' + Level"></span>
        <h4 class="list-group-item-heading" style="margin-top:5px" data-bind="text: Title"></h4>
    </li>
</ul>


<p>```</p>

<p><img src="/images/posts/styled-list.png"></p>

<p>Here are all the changes we just made:</p>

<p>``` diff
@@ -4,13 +4,15 @@</p>

<pre><code> &lt;title&gt;That Conference / Sessions&lt;/title&gt;
 &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
 &lt;!-- Bootstrap --&gt;
</code></pre>

<ul>
<li> <!-- <link rel="stylesheet" href="http://mheggeseth.github.io//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css"> &mdash;>
 <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css"></li>
<li> <!-- <link rel="stylesheet" href="http://mheggeseth.github.io//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-theme.min.css"> &mdash;>
 <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.min.css"></li>
<li> <style type="text/css"></li>
<li><pre><code> /* Necessary for fixed header http://getbootstrap.com/components/#navbar-fixed-top */
</code></pre></li>
<li><pre><code> body { padding-top: 70px; }
</code></pre></li>
<li> </style>
</head>
<body></li>
<li> <nav class="navbar navbar-inverse" role="navigation"></li>
<li><p> <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
     <div class="navbar-header">
         <a class="navbar-brand visible-xs" href="#">That / Sessions</a>
         <a class="navbar-brand hidden-xs" href="#">That Conference / Sessions</a>
@@ -18,17 +20,20 @@
 </nav></p>

<p> <div class="container"></p></li>
<li><pre><code> &lt;span data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/span&gt;
</code></pre></li>
<li><pre><code> &lt;ul class="list-unstyled" data-bind="foreach: sessions"&gt;
</code></pre></li>
<li><pre><code>     &lt;li data-bind="text: Title"&gt;&lt;/li&gt;
</code></pre></li>
<li><pre><code> &lt;div class="alert alert-info" data-bind="visible: !sessions().length"&gt;Loading sessions...&lt;/div&gt;
</code></pre></li>
<li><pre><code> &lt;ul class="list-group" data-bind="foreach: sessions"&gt;
</code></pre></li>
<li><pre><code>     &lt;li class="list-group-item"&gt;
</code></pre></li>
<li><pre><code>         &lt;span class="label label-primary" data-bind="text: new moment(ScheduledDateTime).format('ddd M/D/YY h:mm a') + ' | ' + ScheduledRoom"&gt;&lt;/span&gt;
</code></pre></li>
<li><pre><code>         &lt;span class="label label-default" data-bind="text: Category + ' | ' + Level"&gt;&lt;/span&gt;
</code></pre></li>
<li><pre><code>         &lt;h4 class="list-group-item-heading" style="margin-top:5px" data-bind="text: Title"&gt;&lt;/h4&gt;
</code></pre></li>
<li><pre><code>     &lt;/li&gt;
 &lt;/ul&gt;
</code></pre>

<p> </div></p></li>
<li><p> <!--<script src="http://mheggeseth.github.io//code.jquery.com/jquery.js"></script>&mdash;>
 <script type="text/javascript" src="js/jquery-1.10.2.min.js"></script>
 <script type="text/javascript" src="js/knockout-2.3.0.js"></script></p></li>
<li> <!--<script src="http://mheggeseth.github.io//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>&mdash;>
 <script type="text/javascript" src="js/bootstrap.min.js"></script></li>
<li> <script type="text/javascript" src="js/moment.min.js"></script>
 <script type="text/javascript">
     var viewModel = {
         sessions: ko.observableArray()
```</li>
</ul>


<h2>Next Time: Making it Useful</h2>

<p>So now that we have a session list that&rsquo;s marginally pretty and functional, we should probably make it useful too. Next time, we&rsquo;ll organize the sessions in a relevant way and make it easy to track favorites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS-ish filters in KnockoutJS]]></title>
    <link href="http://mheggeseth.github.io/blog/2013/10/02/angularjs-filters-in-knockoutjs/"/>
    <updated>2013-10-02T22:00:00-05:00</updated>
    <id>http://mheggeseth.github.io/blog/2013/10/02/angularjs-filters-in-knockoutjs</id>
    <content type="html"><![CDATA[<p>As I learn more about <a href="http://angularjs.org">AnuglarJS</a>, I find <a href="http://docs.angularjs.org/guide/dev_guide.templates.filters">filters</a> to be one of the most exciting features of the framework. Filters allow common, mostly-simple display-level modifications to expressions in a view without having to include that logic in the model (i.e. <code>$scope</code>).</p>

<p>Applying a filter to an expression in an Angular view is super easy: <code>{{ expression | filter }}</code> and you&rsquo;re done. Angular comes with a handful of filters for scalar values (<a href="http://docs.angularjs.org/api/ng.filter:number">number</a>, <a href="http://docs.angularjs.org/api/ng.filter:currency">currency</a>, <a href="http://docs.angularjs.org/api/ng.filter:date">date</a>) and arrays (<a href="http://docs.angularjs.org/api/ng.filter:filter">filter</a>, <a href="http://docs.angularjs.org/api/ng.filter:limitTo">limit</a>, <a href="http://docs.angularjs.org/api/ng.filter:orderBy">order</a>) but it&rsquo;s also pretty easy to write your own.</p>

<p>In addition to &ldquo;write once, use everywhere&rdquo; convenience, filters are also chainable. This is particularly useful with Angular&rsquo;s array filters: <code>{{ customerList | filter:searchText | orderBy:'earnings' }}</code> works just like it reads (only show customers with a property value containing the value of the model property <code>searchText</code> and then order those customers by the <code>earnings</code> property). And of course it live-updates when you change <code>searchText</code>.</p>

<p>OK, so Angular is awesome. But what if I&rsquo;ve already done a bunch of stuff using another library (<a href="http://knockoutjs.com">KnockoutJS</a> in my case)? Can I do something like a filter in Knockout? <strong>Hint: yes.</strong></p>

<p>Knockout has two ways that this could work: <a href="http://knockoutjs.com/documentation/fn.html">&ldquo;fn&rdquo; functions</a> and <a href="http://knockoutjs.com/documentation/extenders.html">extenders</a>.</p>

<h2>How <code>fn</code> works</h2>

<p>Each of Knockout&rsquo;s subscribable types exposes a public <code>fn</code> object to which you can add new functions to extend that type with cool new stuff. From then on, that stuff will be available on any new instance of that type. You can add new functions to any of the following:</p>

<ul>
<li><code>ko.subscribable.fn</code></li>
<li><code>ko.observable.fn</code></li>
<li><code>ko.observableArray.fn</code></li>
<li><code>ko.computed.fn</code></li>
</ul>


<p>And because of inheritance, functions that you add to a type will be usable by objects of any of its derived types. We&rsquo;ll see why this is great for filters in a second.</p>

<p><img src="/images/posts/type-hierarchy.png"></p>

<h2>Filters with <code>fn</code></h2>

<p>So how do we turn this into something like filters? Take a look at this fiddle.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Mp5jw/embedded/js,html,resources,result/light/"></iframe></p>

<p>You can see that I&rsquo;ve added 4 functions to <code>ko.subscribable.fn</code>:</p>

<ul>
<li><code>filter</code> to filter an array by a string value</li>
<li><code>orderBy</code> to order an array by an element property value</li>
<li><code>currency</code> to format a number as currency</li>
<li><code>date</code> to format a date</li>
</ul>


<h3>Why <code>ko.subscribable.fn</code>?</h3>

<p>Why not put <code>filter</code> and <code>orderBy</code> on <code>ko.observableArray.fn</code> and put <code>currency</code> and <code>date</code> on <code>ko.observable.fn</code>? Simple: adding these functions to <code>ko.subscribable</code> maximizes chainability.</p>

<p>Let me explain. First, you want to return a <code>ko.computed</code> from filter functions. This ensures automatic UI updates because Knockout tracks subscribables accessed in the function body of a <code>ko.computed</code> and automatically re-evaluates the function when any of those values changes. But a <code>ko.computed</code> is not an observable or an observableArray. It is a <code>ko.subscribable</code>, though. So adding these functions to <code>ko.subscribable.fn</code> allows the inclusion of clear, chainable filters in data bindings like this one: <code>data-bind="foreach: dudes.filter(search, 'name').orderBy(orderBy)"</code>.</p>

<p>It even makes sense to put the scalar (<code>currency</code> and <code>date</code>) filters on <code>ko.subscribable.fn</code> in case you ever add a filter (or filters) that whittles an array to a single value (i.e. <code>first</code>, <code>last</code>, <code>findOne</code>, <code>imFeelingLucky</code>, etc.).</p>

<p>By putting filter functions on <code>ko.subscribable.fn</code>, they are available to <strong>all</strong> subscribable types, giving you lots and lots of flexibility.</p>

<h2>How extenders work</h2>

<p>Extenders and <code>fn</code> are really similar. To create and use an extender, throw in some code like this:</p>

<p>``` javascript
ko.extenders.awesomeSauce = function (target, options) {</p>

<pre><code>//target is the subscribable object you are extending
//  add stuff to it and you can use it in your viewModel and bindings

//options is the object provided to the initialization of the extender
//  use it to control what to add or how those additions behave

return target; //if you don't return target, you might lose track of it
</code></pre>

<p>};</p>

<p>foo = ko.observable().extend({ awesomeSauce: { thing1: true, thing2: false }});
```</p>

<p>Ultimately, there&rsquo;s little difference between <code>fn</code> and extenders as far as the end result is concerned. They both allow you to extend a subscribable. These are really the only differences:</p>

<ul>
<li>You have to (or &ldquo;can be&rdquo;) be more explicit when you want to add extenders to a subscribable by calling <code>.extend()</code>. No automatic inclusion as with <code>fn</code>.</li>
<li>You can (or &ldquo;have to&rdquo;) provide options when you add an extender. This allows you to be more precise about what exactly your subscribable is extended with or how that stuff behaves.</li>
</ul>


<h2>Filters with extenders</h2>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/ubpS7/embedded/js,html,resources,result/light/"></iframe></p>

<p>In the fiddle above, instead of putting all the filter functions I might want to use into the same bag, they are separated by extender name.</p>

<p><code>ko.extenders.arrayExtensions</code> is used to extend an <code>observableArray</code> with the filter functions <code>filter</code> and <code>orderBy</code>. These functions work exactly the same as in the <code>fn</code> example. However, in order to make the <code>arrayExtensions</code> methods chainable, I have to return a <code>subscribable</code> extended with <code>arrayExtensions</code>. This could be easy to forget to do when writing your own filter function. Also, this approach to chainability is not a frugal use of memory since two <em>new</em> functions are added to the target each time you call <code>extend({ arrayExtensions: true })</code>.</p>

<p><code>ko.extenders.formatting</code> is used to extend an <code>observable</code> with filter functions that are appropriate to its data type (either <code>"date"</code> or <code>"currency"</code>, provided as the extender option). Due to their simplicity, I did not make these filter functions chainable. I suppose they could be, but I couldn&rsquo;t think of a good reason to do that here.</p>

<p>To reiterate, in order to take advantage of these filter functions, I have to call <code>.extend()</code> for my <code>amount</code>, <code>date</code>, and <code>dudes</code> observables.</p>

<h2>Discussion and Gotchas</h2>

<p>You can see that there is no difference between the <code>fn</code> and the extender approach in how the <code>data-bind</code> attributes in the HTML consume our filter functions. That&rsquo;s pretty cool.</p>

<p>``` html
<input type="text" data-bind="value: search, valueUpdate: 'afterkeydown'" />
<select data-bind="value: orderBy">&hellip;</select></p>

<table class="table">
    ...
    <tbody data-bind="foreach: dudes.filter(search, 'name').orderBy(orderBy)">
        <tr>
            <td data-bind="text: name"></td>
            <td data-bind="text: amount.currency()"></td>
            <td data-bind="text: date.date('dddd MMMM Do YYYY')"></td>
        </tr>
    </tbody>
</table>


<p>```</p>

<p>While it&rsquo;s convenient for all functions you add to <code>fn</code> to be available to all subsequent instances of that type, <em>ALL</em> functions you add will be available to instances of that type. In the examples above, I added all my functions to <code>ko.subscribable.fn</code> to maximize chainability, but that small set of functions is already mutually-exclusive. <code>filter</code> and <code>orderBy</code> only make sense for observable arrays, <code>currency</code> only makes sense for numbers, and <code>date</code> only makes sense for dates. They are all there whether they make sense to be or not. Fortunately this is not a big concern for performance or scalability because each <code>fn</code> function object is shared by every <code>subscribable</code>.</p>

<p>Also, with the <code>fn</code> approach, putting everything in the same bucket is nice for availability, but if you start defining lots of <code>fn</code> functions in multiple files and possibly loading different subsets of those files on each page, you need to be pretty good at keeping those things straight, using unique function names, and keeping function names meaningful as to which date type they should be used for.</p>

<p>Chainability is powerful, but it can lead to long filter chains. In life, as in Knockout, you don&rsquo;t get money for nothing and chicks for free. Because we have used <code>ko.computed</code> at each step of the way, a change at a point in the filter chain will cause re-evaluation of the remainder of the chain. If you have 10 filters chained together and you&rsquo;re wondering why your page is sluggish, look there first.</p>

<p>I mentioned this above, but I wanted to reiterate it. Using the extender approach can be costly for memory consumption. Each time you <code>.extend()</code> a <code>subscribable</code>, new functions are added to the target. If you end up extending hundreds or thousands of objects on your page, you might start feeling the pain.</p>

<p>You may have noticed that <code>arrayExtensions</code> does not use its <code>options</code> parameter so it does not matter what the value is, but in order to call <code>.extend()</code> with valid JSON, a value must be provided. For no particular reason, I chose to provide <code>true</code>.</p>

<h2>Conclusion</h2>

<p>I hope this was a useful demonstration of the power of <code>fn</code> and extender functions in KnockoutJS. In summary, if you are looking for simplicity and ease of use with respect to filtering, I&rsquo;d say go with <code>fn</code> functions. If you need more precision but perhaps don&rsquo;t care as much about convenience, try extenders.</p>

<p>Enjoy, and let me know what you think!</p>
]]></content>
  </entry>
  
</feed>
